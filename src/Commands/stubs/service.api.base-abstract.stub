<?php

namespace {{ namespace }};

// use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use \Exception;

/**
 * Abstract class {{ class }}.
 *
 * @implements {{ interface }}
 */
abstract class {{ class }} implements {{ interface }}
{
    protected $title = "";
    protected $create_message = "";
    protected $update_message = "";
    protected $delete_message = "";

    /* Response formatting related code: START */
    private $result = null;
    private $status = false;
    private $message = null;
    private $code = null;

    /**
     * set result output
     * @param $result
     * @return $this
     */
    public function setResult($result)
    {
        $this->result = $result;

        return $this;
    }

    /**
     * get result
     * @return null
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * set status
     * @param $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * get status
     * @return bool
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * set message
     * @param $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->message = $message;

        return $this;
    }

    /**
     * get message
     * @return null
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * set code
     * @param $code
     * @return $this
     */
    public function setCode($code)
    {
        $this->code = $code;

        return $this;
    }

    /**
     * get code
     * @return null
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Exception Response
     *
     * @param Exception $exception
     * @return ResultService
     */
    public function exceptionResponse(Exception $exception)
    {
        if ($exception instanceof QueryException) {
            if ($exception->errorInfo[1] == 1451) {
                return $this->setStatus(false)
                    ->setMessage('Unable to delete data. It is being referenced by other records.')
                    ->setCode(400);
            }
        }
        if ($exception instanceof ModelNotFoundException) {
            if (!request()->expectsJson()) {
                return abort(404);
            }
            return $this->setStatus(false)
                ->setMessage('The requested data does not exist.')
                ->setCode(404);
        }
        if (config('app.debug')) {
            $message = (object) [
                'exception' => 'Error',
                'error_message' => $exception->getMessage(),
                'file' => $exception->getFile(),
                'line' => $exception->getLine(),
                'trace' => $exception->getTrace()
            ];
            return $this->setStatus(false)
                ->setMessage($message)
                ->setCode(500);
        }

        return $this->setStatus(false)
            ->setMessage('An unexpected error occurred. Please try again later.')
            ->setCode(500);
    }

    /**
     * response to json
     * @return \Illuminate\Http\JsonResponse
     */
    public function toJson()
    {
        if(is_null($this->getCode())){
            $http_code = $this->getStatus() ? 200 : 400;
        }else{
            $http_code = $this->getCode();
        }

        return response()->json([
            'success' => $this->getStatus(),
            'code' => $http_code,
            'message' => $this->getMessage(),
            'data' => $this->getResult(),
        ], $http_code);
    }

    /* Response formatting related code: END */

    /**
     * Find an item by id
     * @param mixed $id
     * @return Model|null
     */
    public function find($id)
    {
        try {
            $result = $this->repository->find($id);
            return $this->setResult($result)
                        ->setCode(200)
                        ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }

    /**
     * Find an item by id or fail
     * @param mixed $id
     * @return Model|null
     */
    public function findOrFail($id)
    {
        try {
            $result = $this->repository->findOrFail($id);
            return $this->setResult($result)
                ->setCode(200)
                ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }

    /**
     * Return all items
     * @return Collection|null
     */
    public function all()
    {
        try {
            $result = $this->repository->all();;
            return $this->setResult($result)
                ->setCode(200)
                ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }

    /**
     * Create an item
     * @param array|mixed $data
     * @return Model|null
     */
    public function create($data)
    {
        try {
            $this->repository->create($data);
            return $this->setMessage($this->title." ".$this->create_message)
                ->setCode(200)
                ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }

    /**
     * Update a model
     * @param int|mixed $id
     * @param array|mixed $data
     * @return bool|mixed
     */
    public function update($id, array $data)
    {
        try {
            $this->repository->update($id, $data);
            return $this->setMessage($this->title." ".$this->update_message)
                ->setCode(200)
                ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }

    /**
     * Delete all items or the specified model record from the database by ID.
     *
     * @param  mixed|null  $id
     * @return bool|null
     * @throws \Exception
     */
    public function delete($id = null)
    {
        try {
            $this->repository->delete($id);
            return $this->setMessage($this->title." ".$this->delete_message)
                ->setCode(200)
                ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }

    /**
     * multiple delete
     * @param array $id
     * @return mixed
     */
    public function destroy(array $id)
    {
        try {
            $this->repository->destroy($id);
            return $this->setMessage($this->title." ".$this->delete_message)
                ->setCode(200)
                ->setStatus(true);
        } catch (\Exception $exception) {
            return $this->exceptionResponse($exception);
        }
    }
}
