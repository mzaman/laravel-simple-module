<?php

namespace {{ namespace }};

use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use \Exception;

/**
 * Abstract class {{ class }}.
 *
 * @implements {{ interface }}
 */
abstract class {{ class }} implements {{ interface }}
{
    /**
     * The repository instance.
     *
     * @var $repository
     */
    protected $repository;

    /**
     * Find an item by its ID.
     *
     * @param mixed $id The ID of the item to find.
     * @return Model|null The found item.
     */
    public function find($id): ?Model
    {
        return $this->repository->find($id);
    }

    /**
     * Find an item by its ID or fail.
     *
     * @param mixed $id The ID of the item to find.
     * @return Model The found item.
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function findOrFail($id): Model
    {
        return $this->repository->findOrFail($id);
    }

    /**
     * Return all items.
     *
     * @return Collection All items.
     */
    public function all(): Collection
    {
        return $this->repository->all();
    }

    /**
     * Create an item.
     *
     * @param array|mixed $data The data to create the item.
     * @return void
     */
    public function create($data): void
    {
        $this->repository->create($data);
    }

    /**
     * Update a model.
     *
     * @param int|mixed $id The ID of the item to update.
     * @param array $data The data to update.
     * @return Model The updated model.
     */
    public function update($id, array $data): Model
    {
        return $this->repository->update($id, $data);
    }

    /**
     * Delete all items or the specified model record from the database by ID.
     *
     * @param  mixed|null  $id The ID of the item to delete.
     * @return bool|null True if the delete is successful, otherwise null.
     * @throws \Exception
     */
    public function delete($id = null)
    {
        return $this->repository->delete($id);
    }

    /**
     * Delete multiple models by their IDs.
     *
     * @param array $ids The IDs of the items to delete.
     * @return int The number of models deleted.
     */
    public function deleteMultiple(array $ids): int
    {
        return $this->repository->deleteMultiple($ids);
    }

    /**
     * Destroy multiple models by their IDs.
     *
     * @param array $ids The IDs of the items to destroy.
     * @return void
     */
    public function destroy(array $ids)
    {
        $this->repository->destroy($ids);
    }
}
